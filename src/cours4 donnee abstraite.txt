Type de données abstraites (TDA)
    ~abstract data type (ADT)


    Description (semi) formelle d'un typre de données
        description: -des services offerts par un type de donnée (méthodes offertes, en Java)
                     -d'une structure de données
            abstraite: indépendant du code.
                -> construire plusieurs variations/implémentations différente qui arrive au meme résultat,
                    de la meme description

            1: construire avec différent objectif (vitesse, plus petite empreinte mémoire...)
            2: utilisable sans connaitre le code. (remplacer rapidement une implémentation par une autre)



Liste : contenant (peut contenir des éléments) homogène (tous les éléments qu'elle contient sont du meme type) séquentiel
    ((1,3,5,2) != (1,2,3,5))

    Service:
        ajouter/enlever des éléments
            change la taille de la liste
        consulter/modifier les éléments deja dans la liste
        souvent, on peut consulter la taille (et "estVide()")


File (queue, FiFo)(liste spécialisé):  contenant, homogene et sequentiel
        Ajout: a la fin
        Suppression: au début

    Services
        Construction d'une file vide
            -> taille = 0 [Soit F une file vide, alors F.taille == 0]
        Taille{size} :: fonction qui prend une file et retourne un integer positif
            (nombre d'éléments dans la file)
        estVide {isEmpty}{Empty} :: prend file, retourne boolean (retourne vrai sssi taille = 0)

        Enfiler{add}{insert}{push}{offer}: file x valeur -> file... [ajoute une valeur a la fin de la file]

        Tete{peak}{head}: file -> valeur (retourne la personne a la tete de la file)
                retourne le premier element
        defiler{remove}{removeHead}{poll}: enleve le premier element de la file (et le retourne)

            tete et defiler, sur file vide, msgErr, ou retourne null, ou lance exception


    pile (stack, FiLo) contenant sequentiel homogene
        sommet: dernier element empiler

        Constructeur:
                 construction d'une pile vide

        estVide (vrai sssi pas d'élément dans la pile)

        taille: retourne nb d'élément

        empiler{push}: ajoute un élément a la pile (qui devient nouveau sommet)

        sommet{top}: retourne le sommet

        dépiler{pop}: enleve le sommet (et le retourne, souvent)

            sommet et depiler, sur pile vide, msgErr, retourne null ou lance exception



Type de données abstraite: Fonction
    F: A -> B
    F(x) = x+1
      ^=> parametre (element de A)

      (x+1) => corps de la fonction (element de B)

      (A = domaine, B = codomaine, deux types de données)

    pour info:
        F = nom de la méthode
        (x+1) = return (code)
        (x) = parametre
        A = type du parametre
        B = type du return


